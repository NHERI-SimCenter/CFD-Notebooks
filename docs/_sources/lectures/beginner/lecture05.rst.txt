.. _lbl-lecture05:

Lecture 05: snappyHexMesh
=================================

In the case of flow around complex geometries, the geometries are defined through CAD models. In this case, OpenFOAM has the capability to read Stereolithography (STL) or Wavefront Object (OBJ) formats. In this case, the ``blockMesh`` utility is insufficient to mesh such complex geometries. Here, OpenFOAM offers a more suitable utility known as the ``snappyHexMesh``.

STL and OBJ CAD files depict the CAD geomeetry in terms of triangulated surfaces. The ``snappyHexMesh`` utility of OpenFOAM generates three-dimensional meshes containing hexahedra (hex) and split-hexahedra (split-hex) automatically from triangulated surface geometries. To start with the mesh approximately conforms (or snaps) to the surface and is refined by splitting the hex mesh to fit the surface. Additionally, this utility also runs in parallel with a load balancing step during each iteration. The below figure provides a brief outlook into the refinement process of ``snappyHexMesh``.

.. figure:: images/snappyHexRefine.png
    :width: 500px
    :align: center
    :alt: alternate text
    :figclass: align-center

    Overview of the process involved in ``snappyHexMesh``.

Dictionary and folders
--------------------------
The geometry is provided in terms of an STL file. The STL geometry can be generated from any standard geometry (or CAD) modeling software. The STL file can be made up of single surface or multiple surfaces tha describe the geometry. Each of these surfaces are further triangulated. It is preferred to have multiple surfaces as local refinement can be employed to gain more control over the meshng procedure. The STL geometry file is stored in the directory ``constant/triSurface``.

All the parameters related to the meshing utility ``snappyHexMesh`` are given in the file ``snappyHexMeshDict`` located in the directory ``system``. The castellation, snapping, and boundary layer meshing steps are controlled by the dictionary ``snappyHexMeshDict``. The final mesh should be always located in the directory ``constant/polyMesh``.

Before looking at the process of mesh generation, let us explore the ``snappyHexMesh`` dictionary file. The file is made up of five primary sections. Each section controls one part of the meshing process. Overall, there are over 50 parameters to set in the ``snappyHexMeshDict`` and lack of GUI can be confusing at times to generate these files. However, once there are a robust set of parameters, the ``snappyHexMesh`` utility does a great job of generating hexahedron dominated meshes. The general outline of the ``snappyHexMeshdict`` is as shown below and the upcoming sections will highlight each of the sections in detail.

.. code-block:: c++

    castellatedMesh true; 
    snap true;
    addLayers true;

    geometry
    {
        ...
        ...
    }

    castellatedMeshControls
    {
        ...
        ...
    }

    snapControls
    {
        ...
        ...
    }

    addLayersControls
    {
        ...
        ...
    }

    meshQualityControls
    {
        ...
        ...
    }

The first section of \textbf{geometry} outlines the geometric parameters. Here, the section highlights the STL geometry to be used and its location, geometric entities required to create regions, refine mesh and other operation. It is important to note here that multiple STL geometries can be used. This is rather recommended when regional refinements are being used. The STL geometries are located in the directory ``constant/triSurface``. The structure of the \textbf{geometry} section is as given below:

.. code-block:: c++

    geometry
    {
        // STL file to be read
        geometry.stl
        {
            type triSurfaceMesh;
            name 
        }
    }
    

Creating the mesh
---------------------